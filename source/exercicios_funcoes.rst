#. Fa√ßa uma fun√ß√£o que determina se um n√∫mero √© par ou √≠mpar. Use o ``%`` para
   determinar o resto de uma divis√£o. Por exemplo: ``3 % 2 = 1`` e ``4 % 2 = 0``

#. Fa√ßa uma fun√ß√£o que calcule a √°rea de um c√≠rculo. Insira o raio como
   argumento.

   **Dica:** fa√ßa a importa√ß√£o de ``math`` e use :math:`\pi` de l√°.

   .. math::

            A = \pi R^2

#. Crie uma fun√ß√£o que receba um valor de temperatura em Fahrenheit e transforme
   em Celsius.

   Relembrar √© viver:

        .. math::

                \frac{C}{5} = \frac{F - 32}{9}

#. Crie uma fun√ß√£o que receba 3 valores e calcula as ra√≠zes da f√≥rmula de
   Bh√°skara.

   .. math::

        x = \frac{-b \pm \sqrt{b^2 - 4 \cdot a \cdot c}}{2 \cdot a}

   **Dica:** raiz quadrada √© ``sqrt()``, importando ``math``: ``math.sqrt()``

   Fa√ßa um teste com ``bhaskara(1, -4, -5)`` e o programa deve obter as ra√≠zes:
   (5.0, -1.0)

#. Dada a fun√ß√£o: :math:`y = 5x + 2`, determine os valores de :math:`y` para
   :math:`x` entre -10 a +10, onde :math:`x` √© inteiro

#. Escreva uma fun√ß√£o chamada ``has_duplicates`` que tome uma lista e retorne
   ``True`` se houver algum elemento que apare√ßa mais de uma vez. Ela n√£o deve
   modificar a lista original.

#. Duas palavras s√£o um ‚Äúpar inverso‚Äù se uma for o contr√°rio da outra. Escreva
   uma fun√ß√£o que dado duas palavras, retorne ``True`` caso sejam.

#. Escreva uma fun√ß√£o que imprime todos os n√∫meros primos entre 1 e 50

   **Dica:** um n√∫mero √© primo se ele for divis√≠vel apenas por 1 e ele mesmo,
   use o operador ``%`` (resto da divis√£o) para isso.

#. Duas palavras s√£o anagramas se voc√™ puder soletrar uma rearranjando as letras
   da outra. Escreva uma fun√ß√£o chamada ``is_anagram`` que tome duas strings e
   retorne ``True`` se forem anagramas ou False caso contr√°rio.

#. Escreva uma fun√ß√£o que dado um n√∫mero, calcule o fatorial desse n√∫mero.
   Por exemplo, fatorial de 5:

    .. math::

        5! = 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1 = 120

#. Crie uma fun√ß√£o que aproxima a fun√ß√£o matem√°tica seno, utilizando a seguinte
   equa√ß√£o:

   .. math::

        \sin(x) = \sum_{n=0}^{\infty} \frac{(-1)^n}{(2n+1)!} \cdot x^{2n+1}

#. Calcule :math:`\pi` usando um m√©todo de Monte Carlo.

   Monte Carlo √© uma classe de m√©todos para resolver problemas usando
   estat√≠stica. Aqui voc√™ vai implementar uma fun√ß√£o usando um desses algoritmos
   para calcular o n√∫mero :math:`\pi`.

   Dado um c√≠rculo de raio :math:`R` dentro de um quadrado de lados :math:`2R`,
   a raz√£o entre a √°rea do c√≠rculo para a √°rea do quadrado √©:

   .. math::

      \frac{A_\bigcirc}{A_\square} = \frac{\pi R^2}{4 R^2} = \frac{\pi}{4}

   Ou seja, se voc√™ escolher aleatoriamente um ponto dentro do quadrado, a
   probabilidade dele cair dentro do c√≠rculo √© de :math:`\pi / 4`. Se voc√™
   escolher :math:`N` pontos aleat√≥rios dentro do quadrado, cerca de
   :math:`N \pi / 4` estar√£o dentro do c√≠rculo.

   Ent√£o, basta escolher pontos aleat√≥rios dentro do quadrado e ver se est√£o
   dentro do c√≠rculo üôÉ.

   Um ponto :math:`(x, y)` est√° dentro do c√≠rculo se
   :math:`x^2 + y^2 \leq R^2`.

   Fa√ßa uma fun√ß√£o que receba como argumento um n√∫mero :math:`N` de pontos
   :math:`(x, y)` (aleat√≥rios) a serem sorteados. Dentro dessa fun√ß√£o, voc√™
   deve fazer um la√ßo que sorteie esses :math:`N` pontos e veja quantos est√£o
   dentro do c√≠rculo. Se :math:`M` pontos ca√≠rem dentro do c√≠rculo, ent√£o a
   probabilidade de um ponto aleat√≥rio estar dentro do c√≠rculo √©
   aproximadamente :math:`M / N`. Ent√£o, podemos estimar :math:`\pi` como:

   .. math::

      \pi \approx \frac{4 M}{N}

   Para sortear um n√∫mero aleat√≥rio entre :math:`a` e :math:`b` utilize a
   fun√ß√£o `uniform(a, b)` do m√≥dulo `random`. Exemplo:

   .. doctest::

      >>> import random
      >>> random.uniform(1, 2) # n√∫mero aleat√≥rio entre 1 e 2
      1.8740445361226983

   .. only:: instructors-guide

      .. code:: python

         import random

         def pi(N):
             M = 0
             for i in range(N):
                 x, y = random.uniform(0, 1), random.uniform(0, 1) # cosideramos R = 1

                 if (x**2 + y**2 < 1):
                     M += 1

             return 4 * M / N

         print(pi(100))
         print(pi(1000))
         print(pi(10000))
         print(pi(100000))
         print(pi(1000000))
         print(pi(10000000)) # demora um pouquinho :P
